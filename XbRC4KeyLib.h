///
/// This is a Library of different Bios ROMs RC4 Keys
/// 
/// These were pulled with the "MCPX 1.1 Toolkit v2.0 so there may be some incorrect Keys etc
/// (https://legacy.downloads.diomtec.com/homebrew/xbins/PC%20Based%20Applications/bios%20tools/mcpx1.1%20Toolkit/)"
/// 
/// Some Bioses will be duplicate, I plan to add MD5s of each rom over time
/// 
/// 
/// 
/// 
/// 
/// 

// ######################################################### //
// Official Microshaft Bioses


// 3944_256k_BFM.bin
const UCHAR RC4_Retail3944BFM[] =
 { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 

 
 // 4034_256k_BFM.bin
 const UCHAR RC4_Retail4034BFM[] =
 { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 
 

 // 4134_1024k.bin
 const UCHAR RC4_Retail4134[] =
 { 
	0xa6, 0xe4, 0x3c, 0xb1, 0xa0, 0x9d, 0xac, 0x58, 0xcb, 0x65, 
	0xcd, 0xac, 0xc9, 0x27, 0xa7, 0x36, 0xbd, 0x3c, 0x97, 0x39, 
 } 
 
 
 // Unofficial build 4400 MCPX 1.0  
 const UCHAR RC4_Unofficial4400[] =
 { 
	0x85, 0x78, 0xea, 0xfb, 0x40, 0xe4, 0xad, 0x61, 0xb3, 0x31, 
	0xec, 0xe2, 0xd2, 0x77, 0xb7, 0xff, 0xc5, 0xa2, 0x42, 0xc8, 
 } 
 
 
 // 4817_1024k.bin
 const UCHAR RC4_Retail4817[] =
 { 
	0x5d, 0x4e, 0x62, 0xe7, 0x3e, 0xba, 0x20, 0xc3, 0x22, 0x12,
	0x5e, 0x91, 0xa1, 0xc7, 0x9f, 0xe0, 0xfa, 0x05, 0x40, 0xfb, 
 } 

 
 // 4817_256k_BFM.bin
 const UCHAR RC4_Retail4817BFM[] =
 { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 

 
 // 5101_256k.bin
 const UCHAR RC4_Retail5101[] =
 { 
	0x25, 0xc0, 0x65, 0x82, 0xf9, 0xe9, 0x67, 0x56, 0x40, 0x7b, 
	0xe8, 0xf5, 0xc2, 0x1f, 0x0a, 0xd9, 0xb0, 0xa7, 0x83, 0x28, 
 }


 // 5101_256k_BFM.bin
 const UCHAR RC4_Retail5101BFM[] = 
 { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 
 
 
 // 5530_1024k.bin
 const UCHAR RC4_Retail5530[] =
 { 
	0xef, 0xd2, 0x04, 0x39, 0x2d, 0x54, 0xe2, 0xfe, 0x5c, 0xd4, 
	0xa0, 0xc5, 0x0f, 0xa1, 0x08, 0x5b, 0x61, 0x0c, 0x17, 0xdb, 
 } 
 
 
 // 5558_256k_BFM_debug.bin
 const UCHAR RC4_Debug5558BFM[] =
 { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 
 
 
 // 5713_1024k.bin
 const UCHAR RC4_Retail5713[] =
  { 
	0x72, 0x45, 0x72, 0x5d, 0x23, 0x00, 0xe7, 0x56, 0xe7, 0x1c, 
	0xf5, 0x85, 0x57, 0x4e, 0xde, 0x59, 0xf1, 0x34, 0xb9, 0xff, 
 } 
 
 
 // 5838_256k.bin
 const UCHAR RC4_Retail5838[] =
 { 
	0x85, 0x78, 0xea, 0xfb, 0x40, 0xe4, 0xad, 0x61, 0xb3, 0x31, 
	0xec, 0xe2, 0xd2, 0x77, 0xb7, 0xff, 0xc5, 0xa2, 0x42, 0xc8, 
 } 
 
 
 
 // ######################################################### //
 // Complex Bioses
  

// Complex 4627 Debug (BFM)(1024Kb).bin
const UCHAR RC4_CPXDebug4627BFM[] =
 { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 
 
 
 // complex_4627debug.bin
 const UCHAR RC4_CPXDebug4627[] =
 { 
	0xba, 0x53, 0xac, 0x32, 0xda, 0x0e, 0x88, 0xcf, 0x64, 0x04, 
	0xf0, 0x33, 0xa7, 0xf7, 0x84, 0xca, 0x06, 0x61, 0x2d, 0xe9, 
 } 
 
 
 // Complex 4627 Debug v1.02 (1024Kb).bin
 const UCHAR RC4_CPXDebug4627_102[] = 
 { 
	0xba, 0x53, 0xac, 0x32, 0xda, 0x0e, 0x88, 0xcf, 0x64, 0x04, 
	0xf0, 0x33, 0xa7, 0xf7, 0x84, 0xca, 0x06, 0x61, 0x2d, 0xe9, 
 } 
 
 
 // Complex 4627 Debug v1.03 (1024Kb).bin
 const UCHAR RC4_CPXDebug4627_103[] =
 { 
	0xc3, 0x8f, 0x18, 0x8f, 0x10, 0x16, 0x45, 0xe9, 0xe9, 0x88, 
	0x3d, 0xa8, 0x08, 0xec, 0x71, 0x58, 0xae, 0x14, 0xb8, 0xe3, 
 } 
 
 
 // Complex 4627 Retail v1.0 (1024Kb).bin
 const UCHAR RC4_CPXRetail4627[] =
 { 
	0x66, 0xf7, 0x74, 0xe3, 0x21, 0x2b, 0xa9, 0xdc, 0x3b, 0x8b, 
	0xb1, 0xea, 0xc4, 0xac, 0xb0, 0x75, 0x49, 0x70, 0x6b, 0xa6, 
 } 
 
 
  // Complex 4627 Retail v1.02 (1024Kb).bin
 const UCHAR RC4_CPXRetail4627_102[] =
 { 
	0x66, 0xf7, 0x74, 0xe3, 0x21, 0x2b, 0xa9, 0xdc, 0x3b, 0x8b, 
	0xb1, 0xea, 0xc4, 0xac, 0xb0, 0x75, 0x49, 0x70, 0x6b, 0xa6, 
 } 
 
  
  // Complex 4627 Retail v1.03 (1024Kb).bin
 const UCHAR RC4_CPXRetail4627_103[] =
 { 
	0x0d, 0x84, 0x9d, 0xec, 0x65, 0x25, 0xc3, 0xd5, 0x3f, 0xe4, 
	0x8d, 0x7e, 0xf4, 0xeb, 0x22, 0x1f, 0x21, 0xf6, 0x4a, 0x9a, 
 } 
 
 
 // ######################################################### //
 // EvoX ROMs  -- There's a lot
 

 //## EvoX 2.0-3.6 ##//
 
 // EvoX v2.0 (1024kb).bin
 const UCHAR RC4_EvoX20[] =
 {
	
	0xa6, 0xe4, 0x3c, 0xb1, 0xa0, 0x9d, 0xac, 0x58, 0xcb, 0x65, 
	0xcd, 0xac, 0xc9, 0x27, 0xa7, 0x36, 0xbd, 0x3c, 0x97, 0x39, 
 } 
 
  
 // EvoX v2.1 (1024kb).bin
 const UCHAR RC4_EvoX21[] =
 {
	 0xa6, 0xe4, 0x3c, 0xb1, 0xa0, 0x9d, 0xac, 0x58, 0xcb, 0x65, 
	 0xcd, 0xac, 0xc9, 0x27, 0xa7, 0x36, 0xbd, 0x3c, 0x97, 0x39, 
 }
 
 // EvoX v2.2 (1024kb).bin
 const UCHAR RC4_EvoX22[] =
 {
	 0xa6, 0xe4, 0x3c, 0xb1, 0xa0, 0x9d, 0xac, 0x58, 0xcb, 0x65, 
	 0xcd, 0xac, 0xc9, 0x27, 0xa7, 0x36, 0xbd, 0x3c, 0x97, 0x39, 
 }
 
 // EvoX v2.3 (1024kb).bin
 const UCHAR RC4_EvoX23[] =
 {
	 0xa6, 0xe4, 0x3c, 0xb1, 0xa0, 0x9d, 0xac, 0x58, 0xcb, 0x65, 
	 0xcd, 0xac, 0xc9, 0x27, 0xa7, 0x36, 0xbd, 0x3c, 0x97, 0x39, 
 }
 
 // EvoX v2.4 (1024kb).bin
 const UCHAR RC4_EvoX24[] =
 {
	 0xc0, 0xad, 0x34, 0x67, 0xde, 0x78, 0x1f, 0xa0, 0x7b, 0xae, 
	 0x50, 0xe4, 0x60, 0x89, 0xf6, 0x71, 0x40, 0xc6, 0xb3, 0xa1, 
 }
 
 // EvoX v2.5 (256kb).bin
 const UCHAR RC4_EvoX25[] =
 {
	 0x75, 0xf4, 0x60, 0x87, 0xf3, 0xde, 0xb5, 0xd7, 0xa8, 0x93, 
	 0xd4, 0xdf, 0xd6, 0x11, 0x4e, 0x4c, 0x33, 0xe1, 0xec, 0x77, 
 }
 
 // EvoX v2.6 (Xbox 1.0)(256kb).bin
 const UCHAR RC4_EvoX26[] =
 {
	 0xe4, 0x05, 0x0b, 0xd4, 0xa6, 0x99, 0xed, 0xe6, 0x9c, 0xa2, 
	 0x09, 0x00, 0x33, 0x8f, 0x4e, 0xa1, 0x64, 0xf0, 0xa8, 0x6c, 
 }
 
 
 // EvoX v3.6 (Xbox 1.1)(256kb).bin
 const UCHAR RC4_EvoX[] =
 {
	 0x29, 0x95, 0xd9, 0x50, 0xff, 0x62, 0x22, 0x42, 0x27, 0x62, 
	 0x3d, 0xfe, 0x9e, 0x52, 0x89, 0xbc, 0x2c, 0x93, 0x09, 0xb2, 
 }
 



 //## EvoX D6 Bioses ##//
 
 // EvoX D6 (256kb).bin
 const UCHAR RC4_EvoXD6[] =
  { 
	0x68, 0xa0, 0x23, 0xeb, 0xc5, 0x56, 0xd9, 0x4b, 0xc8, 0x19, 
	0x72, 0x01, 0xa0, 0x96, 0x2a, 0xf8, 0x97, 0xa0, 0xe0, 0xcb, 
 } 
 
 
 // EvoX D6 (BFM)(1024kb).bin
 const UCHAR RC4_EvoXD6BFM[] =
  { 
	0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 } 

 
 // EvoX D6 MP (256kb).bin
 const UCHAR RC4_EvoXD6MP[] =
 {
	 0x93, 0xc1, 0x02, 0x45, 0xe4, 0xac, 0x0d, 0xb5, 0x21, 0x21, 
	 0x7f, 0x5b, 0x29, 0x5a, 0x58, 0x90, 0xe0, 0xc4, 0x5e, 0x5d, 
 }
 
 
 //## EvoX M7 ##/
 
 // EvoX M7 (256k).bin
 const UCHAR RC4_M7[] =
 {
	 0x68, 0xa0, 0x23, 0xeb, 0xc5, 0x56, 0xd9, 0x4b, 0xc8, 0x19, 
	 0x72, 0x01, 0xa0, 0x96, 0x2a, 0xf8, 0x97, 0xa0, 0xe0, 0xcb, 
 }
 
 // ExoX M7 BFM.bin
 const UCHAR RC4_M7BFM[] =
 {
	 0xee, 0x0a, 0xcb, 0x56, 0x6d, 0xf1, 0xd9, 0x52, 0x8a, 0x40, 
	 0x6d, 0x2f, 0x3c, 0xfa, 0xa5, 0x1d, 0x8b, 0x20, 0xfe, 0x77, 
 }
 
 
 //## EvoX M8 ##//
 
 // EvoX M8 (Xbox 1.0-1.5)(256kb).bin
 const UCHAR RC4_EvoXM8[] =
 {
	0xdb, 0xd9, 0x84, 0xcf, 0xc6, 0x36, 0x8a, 0x68, 0x15, 0x87, 
	0x29, 0xed, 0x84, 0x80, 0x52, 0x5e, 0x1f, 0x1f, 0x44, 0x10, 
 } 
 
 
 // EvoX M8 (Xbox 1.6)(256kb).bin
 const UCHAR RC4_EvoXM8Xcal[] =
 {
	0xdb, 0xd9, 0x84, 0xcf, 0xc6, 0x36, 0x8a, 0x68, 0x15, 0x87, 
	0x29, 0xed, 0x84, 0x80, 0x52, 0x5e, 0x1f, 0x1f, 0x44, 0x10, 
 }
 
 // EvoX M8+ (Xbox v1.0-v1.5)(256kb).bin
 const UCHAR RC4_EvoXM8Plus[] =
 {
	0xcb, 0xb8, 0xdb, 0x0f, 0x90, 0xb9, 0x60, 0x49, 0x0f, 0x7b, 
	0xac, 0xb9, 0x56, 0x20, 0xeb, 0xf2, 0xa2, 0xa5, 0x74, 0x3b, 
 }
 
 
 // EvoX M8+ (Xbox v1.6)(256kb).bin
  const UCHAR RC4_EvoXM8PlusXcal[] =
  {
	0xcb, 0xb8, 0xdb, 0x0f, 0x90, 0xb9, 0x60, 0x49, 0x0f, 0x7b, 
	0xac, 0xb9, 0x56, 0x20, 0xeb, 0xf2, 0xa2, 0xa5, 0x74, 0x3b, 
  }
  
  
 // EvoX M8+ bfm.bin
 const UCHAR RC4_EvoXM8PlusBFM[] =
 {
	0xcb, 0xb8, 0xdb, 0x0f, 0x90, 0xb9, 0x60, 0x49, 0x0f, 0x7b, 
	0xac, 0xb9, 0x56, 0x20, 0xeb, 0xf2, 0xa2, 0xa5, 0x74, 0x3b, 
 }
  
  
  
  // ######################################################### //
  // Xecuter Bioses
  
 // Xecuter (256kb).bin
 const UCHAR RC4_Xecuter[] =
 {
	0xa6, 0xe4, 0x3c, 0xb1, 0xa0, 0x9d, 0xac, 0x58, 0xcb, 0x65, 
	0xcd, 0xac, 0xc9, 0x27, 0xa7, 0x36, 0xbd, 0x3c, 0x97, 0x39, 
 }
 
 
 // Xecuter_flashbios.bin
  const UCHAR RC4_XecuterFlashBios[] =
 {
	0x68, 0xa0, 0x23, 0xeb, 0xc5, 0x56, 0xd9, 0x4b, 0xc8, 0x19, 
	0x72, 0x01, 0xa0, 0x96, 0x2a, 0xf8, 0x97, 0xa0, 0xe0, 0xcb, 
 } 
 
 
 // xecuter_flashbios26.bin
  const UCHAR RC4_XecuterFlashBios26[] = 
 { 
	0x51, 0xd9, 0x4a, 0xd7, 0xac, 0x63, 0xb5, 0x79, 0x44, 0x51, 
	0xe4, 0x60, 0x6d, 0xf1, 0x73, 0x16, 0x3a, 0x45, 0xe8, 0xa8, 
 } 
 
 
 
  // xecuter_flashbios227.bin
  const UCHAR RC4_XecuterFlashBios227[] = 
 { 
	0x51, 0xd9, 0x4a, 0xd7, 0xac, 0x63, 0xb5, 0x79, 0x44, 0x51, 
	0xe4, 0x60, 0x6d, 0xf1, 0x73, 0x16, 0x3a, 0x45, 0xe8, 0xa8, 
 } 
 
 
   // xecuter_flashbios228.bin
  const UCHAR RC4_XecuterFlashBios228[] = 
 { 
	0x51, 0xd9, 0x4a, 0xd7, 0xac, 0x63, 0xb5, 0x79, 0x44, 0x51, 
	0xe4, 0x60, 0x6d, 0xf1, 0x73, 0x16, 0x3a, 0x45, 0xe8, 0xa8, 
 } 
 
 
 // xecuter_flashbios_v301.bin
  const UCHAR RC4_XecuterFlashBios301[] = 
 { 
	0x51, 0xd9, 0x4a, 0xd7, 0xac, 0x63, 0xb5, 0x79, 0x44, 0x51, 
	0xe4, 0x60, 0x6d, 0xf1, 0x73, 0x16, 0x3a, 0x45, 0xe8, 0xa8, 
 } 
 
 
 // xecuter_flashbios_v302.bin
  const UCHAR RC4_XecuterFlashBios302[] = 
 { 
	0x51, 0xd9, 0x4a, 0xd7, 0xac, 0x63, 0xb5, 0x79, 0x44, 0x51, 
	0xe4, 0x60, 0x6d, 0xf1, 0x73, 0x16, 0x3a, 0x45, 0xe8, 0xa8, 
 } 
 
 
 
  // xecuter_flashbios_v303.bin
  const UCHAR RC4_XecuterFlashBios303[] = 
 { 
	0x51, 0xd9, 0x4a, 0xd7, 0xac, 0x63, 0xb5, 0x79, 0x44, 0x51, 
	0xe4, 0x60, 0x6d, 0xf1, 0x73, 0x16, 0x3a, 0x45, 0xe8, 0xa8, 
 } 
 
 
 
 //## X2 ##//
 
 
  // xecuter2 4972 v1.0 (256Kb).bin
 const UCHAR RC4_X24972 [] =
 {
	 
 }
 // xecuter2 4972 v1.1Final (1024Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4972 v1.1Final (512Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4973 v1.0 (256Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4973 v1.1 (256Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4976 MultiVer (256kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4976.02 (BFM)(256kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4977 (BFM)(256Kb)[h].bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4978 (BFM)(1024kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4978.02 (512kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4978.03 (BFM)(1024kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4979.06 (BFM)(256Kb)[h].bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4981.06 (BFM)(256kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4981.67 (BFM)(1024kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4981.67 (BFM)(256kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4983-06 (BFM)(256kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 4983-67 (BFM)(256kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 v1 (E)(1024kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 v1 (F)(1024kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 v1.0 (1024Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 v1.1 (1024Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 // xecuter2 v1.1 Final (1024Kb).bin
 const UCHAR RC4_X2 [] =
 {
	 
 }
 